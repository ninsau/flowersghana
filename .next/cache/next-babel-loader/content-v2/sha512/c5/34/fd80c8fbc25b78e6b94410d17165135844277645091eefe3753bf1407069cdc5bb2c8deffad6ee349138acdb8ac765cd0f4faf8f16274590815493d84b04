{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as yup from \"yup\";\nimport { DataStore } from \"aws-amplify\";\nimport { Reviews } from \"../media/models\";\nexport default function ReviewsComponent() {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const CustomName = props => /*#__PURE__*/_jsx(TextField, _objectSpread({\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"Your name\",\n    type: \"text\",\n    variant: \"outlined\",\n    fullWidth: true\n  }, props));\n\n  const CustomReview = props => /*#__PURE__*/_jsx(TextField, _objectSpread({\n    margin: \"dense\",\n    multiline: true,\n    id: \"review\",\n    label: \"Your review\",\n    type: \"text\",\n    variant: \"filled\",\n    fullWidth: true\n  }, props));\n\n  const ReviewSchema = yup.object().shape({\n    name: yup.string().min(2, \"Name should be of minimum 2 characters length\").max(40, \"Name should be of maximum 40 characters length\").required(\"Name is required\"),\n    review: yup.string().min(2, \"Review should be of minimum 20 characters length\").required(\"Please type out your review \")\n  });\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n        variant: \"outlined\",\n        onClick: handleClickOpen,\n        children: \"Add a review\"\n      }), /*#__PURE__*/_jsxs(Dialog, {\n        open: open,\n        onClose: handleClose,\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: [/*#__PURE__*/_jsx(DialogTitle, {\n          id: \"form-dialog-title\",\n          children: \"Add a review\"\n        }), /*#__PURE__*/_jsxs(DialogContent, {\n          children: [/*#__PURE__*/_jsx(DialogContentText, {\n            children: \"Share your experience shopping with FlowersGhana. Please reach our customer care lines with any complains you might have.\"\n          }), /*#__PURE__*/_jsx(Formik, {\n            validationSchema: ReviewSchema,\n            initialValues: {\n              name: \"\",\n              review: \"\"\n            },\n            onSubmit: async values => {\n              await new Promise(resolve => setTimeout(resolve, 500));\n              await DataStore.save(new Reviews({\n                name: values.name,\n                review: values.review\n              }));\n              handleClose();\n            },\n            children: ({\n              errors,\n              touched\n            }) => /*#__PURE__*/_jsxs(Form, {\n              children: [/*#__PURE__*/_jsx(Field, {\n                name: \"name\",\n                as: CustomName\n              }), errors.name && touched.name ? errors.name : null, /*#__PURE__*/_jsx(Field, {\n                name: \"review\",\n                as: CustomReview\n              }), errors.review && touched.review ? errors.review : null, /*#__PURE__*/_jsxs(DialogActions, {\n                children: [/*#__PURE__*/_jsx(Button, {\n                  onClick: handleClose,\n                  children: \"Cancel\"\n                }), /*#__PURE__*/_jsx(Button, {\n                  type: \"submit\",\n                  color: \"secondary\",\n                  children: \"Publish\"\n                })]\n              })]\n            })\n          })]\n        })]\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}