{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mac/codespace/flowerghana/cart/addToCart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport localforage from \"localforage\";\nimport { stateStore, removeStore } from \"./store\";\nexport default function AddToCartComponent({\n  itemTitle,\n  itemPrice\n}) {\n  const setDone = stateStore(state => state.setDone);\n  const done = stateStore(state => state.done);\n  const remove = removeStore(state => state.done);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(null);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const router = useRouter();\n  let path = router.asPath;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const Quantity = props => /*#__PURE__*/_jsxDEV(TextField, _objectSpread({\n    margin: \"dense\",\n    label: \"Quantity\",\n    type: \"number\",\n    variant: \"outlined\",\n    fullWidth: true\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n\n  const QuantitySchema = yup.object().shape({\n    quantity: yup.number().min(1, \"Minimum quantity is 1\").max(1000, \"Maximum quantity is 1000\").required(\"Quantity is required\")\n  });\n\n  const FetchSuccess = async values => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    try {\n      const value = await localforage.getItem(itemTitle).then(function (value) {\n        setSuccess(value);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    FetchSuccess();\n  }, [done, remove]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [success === null ? /*#__PURE__*/_jsxDEV(\"sl-button\", {\n      class: \"add\",\n      type: path.includes(\"/bouquet/\") ? \"success\" : null,\n      onClick: handleClickOpen,\n      children: \"Add to cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"sl-button\", {\n      class: \"add\",\n      disabled: true,\n      children: \"Item added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: itemTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"Please choose the quantity of \", itemTitle, \" you want for your purchase today.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          validationSchema: QuantitySchema,\n          initialValues: {\n            quantity: 1,\n            title: itemTitle,\n            price: itemPrice\n          },\n          onSubmit: async values => {\n            await new Promise(resolve => setTimeout(resolve, 500));\n            let netPrice = values.price * values.quantity;\n\n            try {\n              localforage.setItem(values.title, [values.quantity, netPrice]);\n              setDone(!done);\n              handleClose();\n            } catch (err) {\n              console.log(err);\n            }\n          },\n          children: ({\n            errors,\n            touched\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: \"quantity\",\n              as: Quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), errors.quantity && touched.quantity ? errors.quantity : null, /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleClose,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                color: \"secondary\",\n                children: \"Add to cart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/mac/codespace/flowerghana/cart/addToCart.js"],"names":["React","useState","useEffect","Formik","Field","Form","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","yup","useRouter","localforage","stateStore","removeStore","AddToCartComponent","itemTitle","itemPrice","setDone","state","done","remove","success","setSuccess","open","setOpen","router","path","asPath","handleClickOpen","handleClose","Quantity","props","QuantitySchema","object","shape","quantity","number","min","max","required","FetchSuccess","values","Promise","resolve","setTimeout","value","getItem","then","err","console","log","includes","title","price","netPrice","setItem","errors","touched"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,QAApC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,SAAxC;AAEA,eAAe,SAASC,kBAAT,CAA4B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAA5B,EAAsD;AACnE,QAAMC,OAAO,GAAGL,UAAU,CAAEM,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA1B;AACA,QAAME,IAAI,GAAGP,UAAU,CAAEM,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAvB;AACA,QAAMC,MAAM,GAAGP,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAA,OAACE,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAAC0B,IAAD;AAAA,OAAOC;AAAP,MAAkB3B,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM4B,MAAM,GAAGf,SAAS,EAAxB;AACA,MAAIgB,IAAI,GAAGD,MAAM,CAACE,MAAlB;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5BJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAG,MAAM;AACxBL,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMM,QAAQ,GAAIC,KAAD,iBACf,QAAC,SAAD;AACE,IAAA,MAAM,EAAC,OADT;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,SAAS;AALX,KAMMA,KANN;AAAA;AAAA;AAAA;AAAA,UADF;;AAWA,QAAMC,cAAc,GAAGvB,GAAG,CAACwB,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,QAAQ,EAAE1B,GAAG,CACV2B,MADO,GAEPC,GAFO,CAEH,CAFG,EAEA,uBAFA,EAGPC,GAHO,CAGH,IAHG,EAGG,0BAHH,EAIPC,QAJO,CAIE,sBAJF;AAD8B,GAAnB,CAAvB;;AAQA,QAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;AACrC,UAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;;AAEA,QAAI;AACF,YAAME,KAAK,GAAG,MAAMlC,WAAW,CAACmC,OAAZ,CAAoB/B,SAApB,EAA+BgC,IAA/B,CAAoC,UAAUF,KAAV,EAAiB;AACvEvB,QAAAA,UAAU,CAACuB,KAAD,CAAV;AACD,OAFmB,CAApB;AAGD,KAJD,CAIE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAVD;;AAYAlD,EAAAA,SAAS,CAAC,MAAM;AACd0C,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACrB,IAAD,EAAOC,MAAP,CAFM,CAAT;AAIA,sBACE;AAAA,eACGC,OAAO,KAAK,IAAZ,gBACC;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,IAAI,EAAEK,IAAI,CAACyB,QAAL,CAAc,WAAd,IAA6B,SAA7B,GAAyC,IAFjD;AAGE,MAAA,OAAO,EAAEvB,eAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBASC;AAAW,MAAA,KAAK,EAAC,KAAjB;AAAuB,MAAA,QAAQ,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAeE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEL,IADR;AAEE,MAAA,OAAO,EAAEM,WAFX;AAGE,yBAAgB,mBAHlB;AAAA,8BAKE,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,mBAAhB;AAAA,kBAAqCd;AAArC;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,aAAD;AAAA,gCACE,QAAC,iBAAD;AAAA,uDACiCA,SADjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,MAAD;AACE,UAAA,gBAAgB,EAAEiB,cADpB;AAEE,UAAA,aAAa,EAAE;AAAEG,YAAAA,QAAQ,EAAE,CAAZ;AAAeiB,YAAAA,KAAK,EAAErC,SAAtB;AAAiCsC,YAAAA,KAAK,EAAErC;AAAxC,WAFjB;AAGE,UAAA,QAAQ,EAAE,MAAOyB,MAAP,IAAkB;AAC1B,kBAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;AACA,gBAAIW,QAAQ,GAAGb,MAAM,CAACY,KAAP,GAAeZ,MAAM,CAACN,QAArC;;AACA,gBAAI;AACFxB,cAAAA,WAAW,CAAC4C,OAAZ,CAAoBd,MAAM,CAACW,KAA3B,EAAkC,CAACX,MAAM,CAACN,QAAR,EAAkBmB,QAAlB,CAAlC;AACArC,cAAAA,OAAO,CAAC,CAACE,IAAF,CAAP;AACAU,cAAAA,WAAW;AACZ,aAJD,CAIE,OAAOmB,GAAP,EAAY;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,WAbH;AAAA,oBAeG,CAAC;AAAEQ,YAAAA,MAAF;AAAUC,YAAAA;AAAV,WAAD,kBACC,QAAC,IAAD;AAAA,oCACE,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,UAAZ;AAAuB,cAAA,EAAE,EAAE3B;AAA3B;AAAA;AAAA;AAAA;AAAA,oBADF,EAEG0B,MAAM,CAACrB,QAAP,IAAmBsB,OAAO,CAACtB,QAA3B,GAAsCqB,MAAM,CAACrB,QAA7C,GAAwD,IAF3D,eAGE,QAAC,aAAD;AAAA,sCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEN,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,KAAK,EAAC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA,kBADF;AA2DD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport localforage from \"localforage\";\nimport { stateStore, removeStore } from \"./store\";\n\nexport default function AddToCartComponent({ itemTitle, itemPrice }) {\n  const setDone = stateStore((state) => state.setDone);\n  const done = stateStore((state) => state.done);\n  const remove = removeStore((state) => state.done);\n  const [success, setSuccess] = useState(null);\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n  let path = router.asPath;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const Quantity = (props) => (\n    <TextField\n      margin=\"dense\"\n      label=\"Quantity\"\n      type=\"number\"\n      variant=\"outlined\"\n      fullWidth\n      {...props}\n    />\n  );\n\n  const QuantitySchema = yup.object().shape({\n    quantity: yup\n      .number()\n      .min(1, \"Minimum quantity is 1\")\n      .max(1000, \"Maximum quantity is 1000\")\n      .required(\"Quantity is required\"),\n  });\n\n  const FetchSuccess = async (values) => {\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    try {\n      const value = await localforage.getItem(itemTitle).then(function (value) {\n        setSuccess(value);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    FetchSuccess();\n  }, [done, remove]);\n\n  return (\n    <>\n      {success === null ? (\n        <sl-button\n          class=\"add\"\n          type={path.includes(\"/bouquet/\") ? \"success\" : null}\n          onClick={handleClickOpen}\n        >\n          Add to cart\n        </sl-button>\n      ) : (\n        <sl-button class=\"add\" disabled>\n          Item added\n        </sl-button>\n      )}\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">{itemTitle}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please choose the quantity of {itemTitle} you want for your purchase\n            today.\n          </DialogContentText>\n          <Formik\n            validationSchema={QuantitySchema}\n            initialValues={{ quantity: 1, title: itemTitle, price: itemPrice }}\n            onSubmit={async (values) => {\n              await new Promise((resolve) => setTimeout(resolve, 500));\n              let netPrice = values.price * values.quantity;\n              try {\n                localforage.setItem(values.title, [values.quantity, netPrice]);\n                setDone(!done);\n                handleClose();\n              } catch (err) {\n                console.log(err);\n              }\n            }}\n          >\n            {({ errors, touched }) => (\n              <Form>\n                <Field name=\"quantity\" as={Quantity} />\n                {errors.quantity && touched.quantity ? errors.quantity : null}\n                <DialogActions>\n                  <Button onClick={handleClose}>Cancel</Button>\n                  <Button type=\"submit\" color=\"secondary\">\n                    Add to cart\n                  </Button>\n                </DialogActions>\n              </Form>\n            )}\n          </Formik>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}