{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as yup from \"yup\";\nimport { useRouter } from \"next/router\";\nimport localforage from \"localforage\";\nimport { stateStore, removeStore } from \"./store\";\nexport default function AddToCartComponent({\n  itemTitle,\n  itemPrice\n}) {\n  const setDone = stateStore(state => state.setDone);\n  const done = stateStore(state => state.done);\n  const remove = removeStore(state => state.done);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(null);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const router = useRouter();\n  let path = router.asPath;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const Quantity = props => /*#__PURE__*/_jsx(TextField, _objectSpread({\n    margin: \"dense\",\n    label: \"Quantity\",\n    type: \"number\",\n    variant: \"outlined\",\n    fullWidth: true\n  }, props));\n\n  const QuantitySchema = yup.object().shape({\n    quantity: yup.number().min(1, \"Minimum quantity is 1\").max(1000, \"Maximum quantity is 1000\").required(\"Quantity is required\")\n  });\n\n  const FetchSuccess = async values => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    try {\n      const value = await localforage.getItem(itemTitle).then(function (value) {\n        setSuccess(value);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    FetchSuccess();\n  }, [done, remove]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [success === null ? /*#__PURE__*/_jsx(\"sl-button\", {\n      class: \"add\",\n      type: path.includes(\"/bouquet/\") ? \"success\" : null,\n      onClick: handleClickOpen,\n      children: \"Add to cart\"\n    }) : /*#__PURE__*/_jsx(\"sl-button\", {\n      class: \"add\",\n      disabled: true,\n      children: \"Item added\"\n    }), /*#__PURE__*/_jsxs(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsx(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: itemTitle\n      }), /*#__PURE__*/_jsxs(DialogContent, {\n        children: [/*#__PURE__*/_jsxs(DialogContentText, {\n          children: [\"Please choose the quantity of \", itemTitle, \" you want for your purchase today.\"]\n        }), /*#__PURE__*/_jsx(Formik, {\n          validationSchema: QuantitySchema,\n          initialValues: {\n            quantity: 1,\n            title: itemTitle,\n            price: itemPrice\n          },\n          onSubmit: async values => {\n            await new Promise(resolve => setTimeout(resolve, 500));\n            let netPrice = values.price * values.quantity;\n\n            try {\n              localforage.setItem(values.title, [values.quantity, netPrice]);\n              setDone(!done);\n              handleClose();\n            } catch (err) {\n              console.log(err);\n            }\n          },\n          children: ({\n            errors,\n            touched\n          }) => /*#__PURE__*/_jsxs(Form, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              name: \"quantity\",\n              as: Quantity\n            }), errors.quantity && touched.quantity ? errors.quantity : null, /*#__PURE__*/_jsxs(DialogActions, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                onClick: handleClose,\n                children: \"Cancel\"\n              }), /*#__PURE__*/_jsx(Button, {\n                type: \"submit\",\n                color: \"secondary\",\n                children: \"Add to cart\"\n              })]\n            })]\n          })\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}