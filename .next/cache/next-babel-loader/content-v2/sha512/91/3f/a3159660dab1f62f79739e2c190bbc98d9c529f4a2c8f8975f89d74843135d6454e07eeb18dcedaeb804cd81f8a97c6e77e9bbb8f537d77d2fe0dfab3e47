{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RecipientForm from \"./recipientForm\";\nimport SenderForm from \"./senderForm\";\nimport Review from \"./review\";\nimport { stepsStore, activeStepStore } from \"./store\";\nimport localforage from \"localforage\";\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5)\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsx(RecipientForm, {});\n\n    case 1:\n      return /*#__PURE__*/_jsx(SenderForm, {});\n\n    case 2:\n      return /*#__PURE__*/_jsx(Review, {});\n\n    default:\n      throw new Error(\"Unknown step\");\n  }\n}\n\nexport default function CheckoutCompoent() {\n  const classes = useStyles();\n  const steps = stepsStore(state => state.steps);\n  const activeStep = activeStepStore(state => state.activeStep);\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n\n  const FetchCount = async values => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    try {\n      const value = await localforage.length().then(function (numberOfKeys) {\n        setCount(numberOfKeys);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    FetchCount();\n  }, []);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: count !== 0 && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CssBaseline, {}), /*#__PURE__*/_jsx(\"main\", {\n        className: classes.layout,\n        children: /*#__PURE__*/_jsxs(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsx(Typography, {\n            component: \"h1\",\n            variant: \"h4\",\n            align: \"center\",\n            children: \"Checkout\"\n          }), /*#__PURE__*/_jsx(Stepper, {\n            activeStep: activeStep,\n            className: classes.stepper,\n            children: steps.map(label => /*#__PURE__*/_jsx(Step, {\n              children: /*#__PURE__*/_jsx(StepLabel, {\n                children: label\n              })\n            }, label))\n          }), /*#__PURE__*/_jsx(React.Fragment, {\n            children: activeStep === steps.length ? null : /*#__PURE__*/_jsx(React.Fragment, {\n              children: getStepContent(activeStep)\n            })\n          })]\n        })\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}